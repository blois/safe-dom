// Copyright (c) 2013, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

library safe_dom.src.html5_validator;

import 'dart:html';
import 'package:safe_dom/validators.dart';

/**
 * A Dart DOM validator generated from Caja whitelists.
 *
 * This contains a whitelist of known HTML tagNames and attributes and will only
 * accept known good values.
 *
 * See also:
 *
 * * https://code.google.com/p/google-caja/wiki/CajaWhitelists
 */
class Html5NodeValidator implements NodeValidator {
  static final Set<String> _allowedElements = new Set.from([
    {{#elements}}
    '{{.}}',
    {{/elements}}
  ]);

  {{#attributes}}
  static const _standardAttributes = const <String>[
  {{#standardAttributes}}
    '{{.}}',
  {{/standardAttributes}}
  ];

  static const _uriAttributes = const <String>[
  {{#uriAttributes}}
    '{{.}}',
  {{/uriAttributes}}
  ];
  {{/attributes}}

  final UriPolicy uriPolicy;

  static final Map<String, Function> _attributeValidators = {};

  /**
   * All known URI attributes will be validated against the UriPolicy, if
   * [uriPolicy] is null then a default UriPolicy will be used.
   */
  Html5NodeValidator({UriPolicy uriPolicy}):
    this.uriPolicy = uriPolicy != null ? uriPolicy : new UriPolicy() {

    if (_attributeValidators.isEmpty) {
      for (var attr in _standardAttributes) {
        _attributeValidators[attr] = _standardAttributeValidator;
      }

      for (var attr in _uriAttributes) {
        _attributeValidators[attr] = _uriAttributeValidator;
      }
    }
  }

  bool allowsElement(Element element) {
    return _allowedElements.contains(element.tagName);
  }

  bool allowsAttribute(Element element, String attributeName, String value) {
    var tagName = element.tagName;
    var validator = _attributeValidators['$tagName::$attributeName'];
    if (validator == null) {
      validator = _attributeValidators['*::$attributeName'];
    }
    if (validator == null) {
      return false;
    }
    return validator(element, attributeName, value, this);
  }

  static bool _standardAttributeValidator(Element element, String attributeName,
      String value, Html5NodeValidator context) {
    return true;
  }

  static bool _uriAttributeValidator(Element element, String attributeName,
      String value, Html5NodeValidator context) {
    return context.uriPolicy.allowsUri(value);
  }
}
